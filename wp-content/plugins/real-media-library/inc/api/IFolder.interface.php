<?php
namespace MatthiasWeb\RealMediaLibrary\api;

/*
 * This interface provides elementary methods for folder objects. All folder
 * types (Folder, Collection, Gallery, ...) have implemented this interface.
 * Also the root ("Unorganized") is a folder and implements this interface. Usually,
 * the root acts as "-1" but you should use the _wp_rml_root() function to get the
 * root id.
 * 
 * If this interface does not provide an expected method, yet, have a look at the
 * other API files. For example, to create a folder, use wp_rml_create().
 * 
 * You can use the following API function to check, if a php variable has
 * this interface (example):
 * 
 * $folder = wp_rml_get_object_by_id(5);
 * if (is_rml_folder($folder)) { // @see folders.php
 *      // It is an interface implementation of IFolder
 * }
 * 
 * With the following API php functions you can get those objects: // @see folders.php
 * - wp_rml_root_childs()
 * - wp_rml_get_object_by_id()
 * - wp_rml_get_by_id()
 * - wp_rml_get_by_absolute_path()
 * - wp_rml_objects()
 */
interface IFolder {
    /*
     * Fetch all attachment ids currently in this folder. It uses the
     * default WP_Query to fetch the ids. You can also use the WP_Query like:
     * 
     * $query = new \WP_Query(array(
     *  	'post_status' => 'inherit',
     *  	'post_type' => 'attachment',
     *  	'rml_folder' => 4
     * ));
     * 
     * @param $order The order "ASC" or "DESC"
     * @param $orderby Use "rml" to get ids ordered by custom order
     * @return array of post ids
     */
    public function read($order = null, $orderby = null);
    
    /*
     * Checks, if this folder has a children with the name.
     *  
     * @param $slug String Slug or Name of folder
     * @param $isSlug boolean Set it to false, if the slug is not santizied (@see $this->getSlug())
     * @param $returnObject If set to true and a children with this name is found, then return the object for this folder
     * @return boolean
     */
    public function hasChildren($slug, $isSlug = true, $returnObject = false);
    
    /*
     * Return the type for the given folder. For example: 0 = Folder, 1 = Collection, 2 = Gallery
     * 
     * @return int
     */
    public function getType();
    
    /*
     * Checks, if a children type is allowed here.
     * 
     * @return Array with allowed types or TRUE for all types allowed
     */
    public function getAllowedChildrenTypes();
    
    /*
     * Get the autogenerated ID
     * 
     * @return int
     */
    public function getId();
    
    /*
     * Get the parent ID
     * 
     * @return int
     */
    public function getParent();
    
    /*
     * Get the name
     * 
     * @return string
     */
    public function getName();
    
    /*
     * Returns a santitized title for the folder. If the slug is empty
     * or forced to, it will be updated in the database, too.
     * 
     * @param $force Forces to regenerate the slug
     * @return string
     */
    public function getSlug($force = false);
    
    /*
     * Creates a absolute path without slugging' the names.
     * 
     * @param $implode Delimitter for the folder names
     * @return string
     */
    public function getPath($implode = "/");
    
    /*
     * Creates a absolute path. If the absolute path is empty
     * or forced to, it will be updated in the database, too.
     * 
     * @param $force Forces to regenerate the absolute path
     * @return string
     */
    public function getAbsolutePath($force = false);
    
    /*
     * Gets the count of the files in this folder.
     * 
     * @return int
     */
    public function getCnt($forceReload = false);
    
    /*
     * Returns childrens of this folder.
     * 
     * @return array of folder objects which implements IFolder
     */
    public function getChildren();
    
    /*
     * Get the order
     */
    public function getOrder();
    
    /*
     * Get the restrictions of this folder. For more details have a 
     * look at the Permissions class.
     * 
     * @return array
     */
    public function getRestrictions();
	
	/*
	 * Get the count of the restrictions
	 * 
	 * @return int
	 */
    public function getRestrictionsCount();
    
    /*
     * Check if the folder object is a given type.
     * 
     * @param $folder_type (@see ./real-media-library.php for Constant-Types)
     * @return boolean
     */
    public function is($folder_type);
    
    /*
     * Returns childrens of this folder.
     * 
     * @deprecated Use getChildren()!
     * @return array of folder objects which implements IFolder
     */
    public function getChildrens();
    
    /*
     * Gets a plain array with folder properties
     * 
     * @return array
     */
    public function getPlain();
}
?>